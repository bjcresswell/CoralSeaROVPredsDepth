---
title: "Effect of depth on predator species richness: model fit"
author: "Ben Cresswell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output: 
 html_document:
    code_folding: show
    collapse: no
    df_print: paged
    fig_caption: yes
    fig_height: 6
    fig_width: 10
    highlight: textmate
    theme: spacelab
    toc: yes
    toc_float: yes
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
# Set options, housekeeping
knitr::opts_chunk$set(
	echo = FALSE,
	include = TRUE,
	message = FALSE,
	warning = FALSE)
```


# Load data and other preliminaries
```{r message=FALSE, warning=FALSE, include=FALSE}
# Clear out 
rm(list=ls()) 

# Load packages, extras and helper functions
sourceRmd::sourceRmd("code/0_extras/source_extras.Rmd")

# Load data
#sourceRmd("code/3_sprich/diw_sprich.qmd")
load(file = "data/2_Rdata/species_rich_asymp.Rdata")

# Set global STAN options
options(#mc.cores = 3,
        mc.cores = parallel::detectCores(),
        brms.backend = "cmdstanr")
rstan_options(auto_write = TRUE)

# Set chain properties
CHAINS <- 3
CORES <- parallel::detectCores()
ITER <- 5000
WARMUP <- 1000
BAYES_SEED <- 123
THIN <- 4
```



# Set model formula
Response variable is SpecRich, with Depth_m (centered and scaled) as our fixed effect
We know we have lots of zeros - in the abundance model we used a zi_nb distribution to handle this.
Asymptotic species richness is not count data so we can't use this, but we could use a hurdle log normal instead
We'll also incorporate the same random effect (Site) into this model

```{r}
sr_form <- bf(SpecRich ~ scale(Depth_m) + (1|Site),  family = hurdle_lognormal(), hu ~ 1)
```

# What priors do we need?
```{r}
get_prior(sr_form, data = species_rich_asymp)
```

# What is the range of our data?
```{r}
species_rich_asymp |> 
  mutate(log_SR = log(SpecRich)) |> 
  group_by(Depth) |> 
  summarise(median = median(SpecRich), MAD = mad(SpecRich), 
            log_median = median(log_SR), log_MAD = mad(log_SR))
```

```{r}
sr_priors <- 
  prior(normal(1, 1), class = "Intercept") +
  prior(logistic(0, 1), class = "Intercept", dpar = "hu") +
  prior(student_t(3, 0, 1), class = 'sigma', lb = 0) +
  prior(normal(0, 1), class = 'b') 
  #prior(normal(0, 0.1), class = 'b', dpar = "hu") 
```


# Fit model
```{r}
sr_prioronlymod<- brm(formula = sr_form, 
            data = species_rich_asymp,
            prior = sr_priors,
            sample_prior = 'only',
            chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED, thin = THIN,
            control = list(adapt_delta = 0.99, max_treedepth = 20), 
            silent = 0,            
            refresh = 0)
```



## Check
```{r}
sr_prioronlymod |> conditional_effects() |> plot(points = TRUE, ask = FALSE) 
```



# Priors look good - include data
```{r}
sr_mod <- 
  brm(formula = sr_form, 
            data = species_rich_asymp,
            prior = sr_priors,
            sample_prior = 'yes',             
            chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED, thin = THIN,
            control = list(adapt_delta = 0.99, max_treedepth = 20), 
            silent = 0,            
            refresh = 0)
```


# CHeck prior - posterior influence
```{r}
sr_mod |> SUYR_prior_and_posterior()
```


Looking good


# Chain diagnostics

```{r chains-1}
## Trace plots
sr_mod$fit |>  stan_trace()
## AC
sr_mod$fit |> stan_ac() 
## rhat
sr_mod$fit |> stan_rhat() 
## ESS
sr_mod$fit |> stan_ess()
```

Chains looking good


# Residuals
```{r}
resids <- make_brms_dharma_res(sr_mod, integerResponse = FALSE)
testUniformity(resids)
plotResiduals(resids, form = factor(rep(1, nrow(species_rich_asymp))))
plotResiduals(resids, quantreg = FALSE)
testDispersion(resids) # Dispersion plot (dispersion = variance/mean) - we assume mean and variance are the same, so we need to check
```


# Only KS off a bit

## PP checks
```{r}
pp_check(sr_mod, ndraws = 250)

# Logged
predicted <- posterior_predict(sr_mod)
bayesplot::ppc_dens_overlay(y = log1p(species_rich_asymp$SpecRich), 
                            yrep = log1p(predicted[1:250,]))
```

Pretty good coverage


# See if hurdle Gamma a better fit
```{r}
sr_form2 <- bf(SpecRich ~ scale(Depth_m) + (1|Site), family = hurdle_gamma(link = "log"), hu ~ 1) # 
```

# What priors do we need?
```{r}
get_prior(sr_form2, data = species_rich_asymp)
```

Now need a shape prior
```{r}
sr_priors2 <- 
  prior(normal(1, 1), class = "Intercept") +
  prior(logistic(0, 1), class = "Intercept", dpar = "hu") +
  prior(gamma(0.01, 0.01), class = 'shape', lb = 0) +
  prior(normal(0, 1), class = 'b') 
  #prior(normal(0, 0.1), class = 'b', dpar = "hu") 
```


# Fit hu_gamma model
```{r}
sr_mod2 <- 
  brm(formula = sr_form2, 
            data = species_rich_asymp,
            prior = sr_priors2,
            sample_prior = 'yes',             
            chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED, thin = THIN,
            silent = 0,            
            refresh = 0)
```


# Chain diagnostics
```{r mod2-chains}
## trace
sr_mod2$fit |>  stan_trace()
## ac
sr_mod2$fit |> stan_ac() 
## rhat
sr_mod2$fit |> stan_rhat() 
## ess
sr_mod2$fit |> stan_ess()
```


# Residuals
```{r}
resids <- make_brms_dharma_res(sr_mod2, integerResponse = FALSE)
testUniformity(resids)
plotResiduals(resids, form = factor(rep(1, nrow(species_rich_asymp))))
plotResiduals(resids, quantreg = FALSE)
testDispersion(resids) # Dispersion plot (dispersion = variance/mean) - we assume mean and variance are the same, so we need to check
```
Same issue with KS test. Otherwise looks fine.


## PP checks
```{r}
# Exp
pp_check(sr_mod2, ndraws = 250)

# Logged
predicted <- posterior_predict(sr_mod2)
bayesplot::ppc_dens_overlay(y = log1p(species_rich_asymp$SpecRich), 
                            yrep = log1p(predicted[1:500,]))
```


# Compare with loo
```{r}
loo_compare(brms::loo(sr_mod), # hu_ln
            brms::loo(sr_mod2)) # hu_gamma
```

# Log normal better elpd

# Will check a GAM

```{r}
sr_gam_form <- bf(SpecRich ~ s(Depth_m) + (1|Site),  family = hurdle_lognormal(), hu ~ 1)
```


```{r}
sr_gam <- 
  brm(formula = div_depth_gam_form, 
            data = species_rich_asymp,
            prior = sr_priors,
            sample_prior = 'yes',             
            chains = CHAINS, iter = ITER, warmup = WARMUP, seed = BAYES_SEED, thin = THIN,
            silent = 0,            
            refresh = 0)
```


# Chain diagnostics - GAM
```{r gam-chains}
## trace
div_depth_gam$fit |>  stan_trace()
## ac
div_depth_gam$fit |> stan_ac() 
## rhat
div_depth_gam$fit |> stan_rhat() 
## ess
div_depth_gam$fit |> stan_ess()
```


# Residuals
```{r}
resids <- make_brms_dharma_res(sr_gam, integerResponse = FALSE)
testUniformity(resids)
plotResiduals(resids, form = factor(rep(1, nrow(species_rich_asymp))))
plotResiduals(resids, quantreg = FALSE)
testDispersion(resids) # Dispersion plot (dispersion = variance/mean) - we assume mean and variance are the same, so we need to check
```


# Residuals look ok

## PP checks
```{r}
# Exp
pp_check(sr_gam, ndraws = 250)

# Logged
predicted <- posterior_predict(sr_gam)
bayesplot::ppc_dens_overlay(y = log1p(species_rich_asymp$SpecRich), 
                            yrep = log1p(predicted[1:250,]))
```


# Compare with loo
```{r}
loo_compare(brms::loo(sr_mod),
            brms::loo(sr_gam))
```


# Overview fig 
```{r}
sr_mod |> conditional_effects() |> plot(points = FALSE, ask = FALSE)
```



# Final model
```{r}
sr_mod_final <- sr_mod
save(sr_mod_final, file = "data/2_Rdata/mod_data/sr_mod_final.rda")
```
